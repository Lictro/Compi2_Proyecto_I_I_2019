%operation %virtual string_t gencode(ASTNode* this, MethodDef* method)

gencode(Type){return "";}
gencode(DeclareField){return "";}
gencode(Declaration){return "";}
gencode(DeclareList){return "";}
gencode(DeclareSimple){return "";}
gencode(DeclareIdx){return "";}
gencode(Parameters){return "";}
gencode(Param){return "";}

gencode(ASTNode){
    return "";
}

gencode(Program){
    save_str("\"true\"");
    save_str("\"false\"");
    method_field->gencode(method);
    std::ostringstream sscode;
    if(method_field != nullptr)
        method_field->gencode(method);
    sscode << "global main\n\n"
        << "extern printf\n"
        << "extern scanf\n"
        << "extern time\n"
        << "\nsection .data\n"
        << getGlobal()
        << getTextSection()<<"\n"
        << "section .text\n\n"
        << "section .data\n\n"
        << method_field->code
        ;
    code = sscode.str();
    std::cout<<code<<std::endl;
    return code;
}

gencode(MethodsField){
    std::ostringstream sscode;
    for(int i = 0; i < methods.size(); i++){
        sscode << methods[i]->gencode(method);
    }
    code = sscode.str();
    return code;
}

gencode(Method){
    //std::cout<<"Method"<<std::endl;
    std::ostringstream sscode;
    exit_methods.push("end_" + id);
    block->gencode(def);
    sscode << def->header() << "\n" << id << ":\n";
    if(def->offset>0){
        sscode << "push ebp\n"
            << "mov ebp, esp\n"
            << "sub esp, " << def->offset<<"\n\n";
    }
    sscode << block->code;
    sscode << "\nend_"<<id<<":\n";
    if(def->offset>0){
        sscode << "add esp, " << def->offset<<"\n";
        sscode << "leave\n";
    }
    sscode << "ret\n";
    code = sscode.str();
    exit_methods.pop();
    return code;
}

gencode(BlockStatement){
    //std::cout<<"BlockStatement"<<std::endl;
    std::ostringstream sscode;
    for(int i = 0; i < stmts.size(); i++){
        sscode << stmts[i]->gencode(method);
    }
    code = sscode.str();
    return code;
}

gencode(MethodCallStatement){
    //std::cout<<"MethodCallStatement "<< identifier <<std::endl;
    std::ostringstream sscode;
    int params = 0;
    if(identifier == "SOPLN"){
        ////std::cout<<"estas en sop"<<std::endl;
        string_t mask = "\"";
        string_t place;
        auto argu = dynamic_cast<ArgumentsList*>(args)->args;
        for(auto &arg : argu){
            if(arg->isA(StrLiteral_kind)){
                mask += "%s";
            }else{
                auto expr = dynamic_cast<Expr*>(arg);
                int type = expr->getTypeExpr(method);
                if(type == 1){
                    mask += "%d";
                }else{
                    mask += "%s";
                }
            }
        }
        mask += "%c\"";
        place = save_str(mask);
        sscode << "push 10\n";
        params+=4;
        for(int i = argu.size()-1; 0 <= i; i--){
            params+=4;
                if(argu[i]->isA(StrLiteral_kind)){
                    sscode << "push ";
                    sscode << save_str("\""+argu[i]->toString()+"\"");
                }else{
                    auto expr = dynamic_cast<Expr*>(argu[i]);
                    int type = expr->getTypeExpr(method);
                    expr->gencode(method);
                    if(type == 1){
                        if(expr->isA(Number_kind))
                            sscode << "push " << expr->place;
                        else
                            sscode << expr->code <<"push dword[" << expr->place << "]";
                    }else{
                        if(expr->isA(BoolConst_kind)){
                            if(expr->place == "1"){
                                sscode << "push str1";
                            }else{
                                sscode << "push str2";
                            }
                        }else{
                            string_t lbl = newlbl();
                            sscode << expr->code
                                << "mov eax, " << getPlace(expr) << "\n"
                                << "cmp eax, 1\n"
                                << "je "<< lbl << "\n"
                                << "push str2\n"
                                << "jmp end_" << lbl <<"\n"
                                << lbl << ":\n"
                                << "push str1\n"
                                << "end_"<<lbl<<":\n";
                        }
                    }
                }
            sscode << "\n";
        }
        params+=4;
        sscode << "push " << place << "\n"
            << "call printf\n"
            << "add esp, "<< params << "\n";
    }else if(identifier == "SOP"){
        ////std::cout<<"estas en sop"<<std::endl;
        string_t mask = "\"";
        string_t place;
        auto argu = dynamic_cast<ArgumentsList*>(args)->args;
        for(auto &arg : argu){
            if(arg->isA(StrLiteral_kind)){
                mask += "%s";
            }else{
                auto expr = dynamic_cast<Expr*>(arg);
                int type = expr->getTypeExpr(method);
                if(type == 1){
                    mask += "%d";
                }else{
                    mask += "%s";
                }
            }
        }
        mask += "\"";
        place = save_str(mask);
        for(int i = argu.size()-1; 0 <= i; i--){
            params+=4;
            if(argu[i]->isA(StrLiteral_kind)){
                sscode << "push ";
                sscode << save_str("\""+argu[i]->toString()+"\"");
            }else{
                auto expr = dynamic_cast<Expr*>(argu[i]);
                int type = expr->getTypeExpr(method);
                expr->gencode(method);
                if(type == 1){
                    if(expr->isA(Number_kind))
                        sscode << "push " << expr->place;
                    else
                        sscode << expr->code <<"push dword[" << expr->place << "]";
                }else{
                    if(expr->isA(BoolConst_kind)){
                        if(expr->place == "1"){
                            sscode << "push str1";
                        }else{
                            sscode << "push str2";
                        }
                    }else{
                        string_t lbl = newlbl();
                        sscode << expr->code
                            << "mov eax, " << getPlace(expr) << "\n"
                            << "cmp eax, 1\n"
                            << "je "<< lbl << "\n"
                            << "push str2\n"
                            << "jmp end_" << lbl <<"\n"
                            << lbl << ":\n"
                            << "push str1\n"
                            << "end_"<<lbl<<":\n";
                    }
                }
            }
            sscode << "\n";
        }
        params+=4;
        sscode << "push " << place << "\n"
            << "call printf\n"
            << "add esp, "<< params << "\n";
    }else if(identifier == "SOR"){
        sscode << "call scanf\n";
    }else if(identifier == "RANDOM"){
        sscode << "call rand\n";
    }else{
        //std::cout<<"pass 1"<<std::endl;
        int count = getParamsCount(identifier);
        //std::cout<<"pass 2"<<std::endl;
        if(args != nullptr){
            sscode << args->gencode(method);
        }
            sscode<< "call " << identifier << "\n";
        //std::cout<<"pass 3"<<std::endl;
        if(count>0){
            sscode << "add esp, " << std::to_string(count*4) << "\n";
            ////std::cout<<"pass 4"<<std::endl;
        }
        ////std::cout<<"pass 5"<<std::endl;
    }
    code = sscode.str();
    return code;
}

gencode(AssignStatement){
    //std::cout<<"AssignStatement"<<std::endl;
    std::ostringstream sscode;
    lhs->gencode(method);
    sscode << rhs->gencode(method)
        << "mov eax, " + getPlace(rhs) + "\n"
        << lhs->code
        << "mov dword[" + lhs->place + "], eax      ;"
        << toString()<<"\n";
    code = sscode.str();
    return code;
}

gencode(ForStatement){
    //std::cout<<"ForStatement"<<std::endl;
    string_t lbl = "for_" + newlbl();
    goback_point.push(lbl);
    exit_point.push("end_" + lbl);
    std::ostringstream sscode;
    sscode 
        << "; ForStatement\n"
        << assignings->gencode(method)
        << lbl << ":\n"
        << cond->gencode(method)
        << "mov eax, " << getPlace(cond)<<" ;for condition\n"
        << "cmp eax, 1\n"
        << "jl end_" << lbl <<"\n"
        << block->gencode(method)
        << increments->gencode(method)
        << "jmp " << lbl << "\n"
        << "end_" << lbl << ":\n\n";
    code = sscode.str();
    exit_point.pop();
    goback_point.pop();
    return code;
}

gencode(IfStatement){
    //std::cout<<"IfStatement"<<std::endl;
    string_t lbl = "if_" + newlbl();
    cond->gencode(method);
    string_t tr, fal;
    if(true_blk != nullptr){
        tr = true_blk->gencode(method);
    }
    if(close_blk != nullptr){
        fal = close_blk->gencode(method);
    }
    code = lbl + ":\n";
    code += cond->code;
    code += "mov eax, " + getPlace(cond) + "\n";
    code += "cmp eax, 1\n";
    code += "jne else_" + lbl + "\n";
    code += tr;
    code += "jmp end_" + lbl + "\n";
    code += "else_" + lbl + ":\n";
    code += fal;
    code += "end_" + lbl + ":\n";
    return code;
}

gencode(WhileStatement){
    //std::cout<<"WhileStatement"<<std::endl;
    string_t lbl = "while_" + newlbl();
    goback_point.push(lbl);
    exit_point.push("end_" + lbl);
    std::ostringstream sscode;
    sscode 
        << "; WhileStatement\n"
        << lbl << ":\n"
        << cond->gencode(method)
        << "mov eax, " << getPlace(cond)<<" ;while condition\n"
        << "cmp eax, 1\n"
        << "jl end_" << lbl <<"\n"
        << block->gencode(method)
        << "jmp " << lbl << "\n"
        << "end_" << lbl << ":\n\n";
    code = sscode.str();
    exit_point.pop();
    goback_point.pop();
    return code;
}

gencode(AssigningsStatement){
    //std::cout<<"AssigningsStatement"<<std::endl;
    std::ostringstream sscode;
    for(int i = 0; i < assigns.size(); i++){
        sscode<< assigns[i]->gencode(method);
    }
    code = sscode.str();
    return code;
}

gencode(BreakStatement){
    //std::cout<<"BreakStatement"<<std::endl;
    string_t exit = exit_point.top();
    return "jmp " + exit + "\n";
}

gencode(ContinueStatement){
    //std::cout<<"ContinueStatement"<<std::endl;
    string_t back = goback_point.top();
    return "jmp " + back + "\n";
}

gencode(ReturnStatement){
    //std::cout<<"ReturnStatement"<<std::endl;
    string_t exit = exit_methods.top();
    std::ostringstream sscode;
    if(expr == nullptr){
        return "mov eax, 3021998\njmp " + exit + "\n";
    }
    sscode << expr->gencode(method)
        << "mov eax, " << getPlace(expr) << "\n"
        << "jmp " << exit << "\n";
    return sscode.str();
}

gencode(Number){
    //std::cout<<"Number"<<std::endl;
    place = std::to_string(number);
    return "";
}

gencode(BoolConst){
    //std::cout<<"BoolConst"<<std::endl;
    place = std::to_string(tOf);
    return "";
}

gencode(LValueSim){
    //std::cout<<"LValueSim"<<std::endl;
    place = method->getPlace(id);
    return "";
}

gencode(LValueIdx){
    //std::cout<<"LValueIdx"<<std::endl;
    std::ostringstream sscode;
    idx->gencode(method);
    sscode << idx->code
        << "mov ecx, " << getPlace(idx) << "\n"
        << "shl ecx, 2\n"
        << "mov edx, " << id << "\n"
        << "add edx, ecx\n";
    place = "edx";
    code = sscode.str();
    return code;
}

gencode(MethodCallExpr){
    //std::cout<<"MethodCallExpr"<<std::endl;
    std::ostringstream sscode;
    if(id == "SOR"){
        string_t off = std::to_string(method->getOffset());
        place = "ebp - " + off;
        sscode
            << "mov eax, ebp\n"
            << "sub eax, " << off << "\n"
            << "push eax\n"
            << "push " << save_str("\"%d\"") << "\n"
            << "call scanf\n"
            << "add esp, 8\n";
    }else if(id == "RANDOM"){
        exprs->gencode(method);
        place = "ebp - " + std::to_string(method->getOffset());
        sscode << "push 0\n"
            << "call time\n"
            << "add esp, 4\n"
            << exprs->code
            << "mov ecx, "<< getPlace(exprs)<<"\n"
            << "xor edx, edx\n"
            << "cdq\n"
            << "idiv ecx\n"
            << "mov dword["<<place<<"], edx\n";
    }else{
        int count = getParamsCount(id);
        sscode << exprs->gencode(method)
            << "call " << id << "\n";
        if(count>0)
            sscode << "add esp, " << std::to_string(count*4) << "\n";
        place = "ebp - " + std::to_string(method->getOffset());
        sscode   << "mov dword[" + place + "], eax\n";
    }
    code = sscode.str();
    return code;
}

gencode(ExprList){
    //std::cout<<"ExprList"<<std::endl;
    std::ostringstream sscode;
    
    for(int i = exprs.size()-1; 0 <= i; i--){
        sscode << exprs[i]->gencode(method)
            << "push " << getPlace(exprs[i]) << "   ;" << exprs[i]->toString() <<"\n" ;
    }
    return sscode.str();
}

gencode(Add_Expr){
    //std::cout<<"Add_Expr"<<std::endl;
    std::ostringstream sscode;
    sscode << expr1->gencode(method)
        << expr2->gencode(method)
        << "mov eax, " + getPlace(expr1) + "\n"
        << "add eax, " + getPlace(expr2) + "    ;"<< toString()<<"\n";
    place = "ebp - " + std::to_string(method->getOffset());
    sscode   << "mov dword[" + place + "], eax\n";
    code = sscode.str();
    return code;
}

gencode(Sub_Expr){
    //std::cout<<"Sub_Expr"<<std::endl;
    std::ostringstream sscode;
    sscode << expr1->gencode(method)
        << expr2->gencode(method)
        << "mov eax, " + getPlace(expr1) + "\n"
        << "sub eax, " + getPlace(expr2) + "    ;"<< toString()<<"\n";
    place = "ebp - " + std::to_string(method->getOffset());
    sscode   << "mov dword[" + place + "], eax\n";
    code = sscode.str();
    return code;
}

gencode(Mul_Expr){
    //std::cout<<"Mul_Expr"<<std::endl;
    std::ostringstream sscode;
    sscode << expr1->gencode(method)
        << expr2->gencode(method)
        << "mov eax, " + getPlace(expr1) + "\n"
        << "mov ecx, " + getPlace(expr2) + "\n"
        << "imul ecx " << "    ;"<< toString()<<"\n";
    place = "ebp - " + std::to_string(method->getOffset());
    sscode   << "mov dword[" + place + "], eax\n";
    code = sscode.str();
    return code;
}

gencode(Div_Expr){
    //std::cout<<"Div_Expr"<<std::endl;
    std::ostringstream sscode;
    sscode << expr1->gencode(method)
        << expr2->gencode(method)
        << "xor edx, edx\n"
        << "mov eax, " + getPlace(expr1) + "\n"
        << "mov ecx, " + getPlace(expr2) + "\n"
        << "cdq\n"
        << "idiv ecx " << "    ;"<< toString()<<"\n";
    place = "ebp - " + std::to_string(method->getOffset());
    sscode   << "mov dword[" + place + "], eax\n";
    code = sscode.str();
    return code;
}

gencode(Mod_Expr){
    //std::cout<<"Mod_Expr"<<std::endl;
    std::ostringstream sscode;
    sscode << expr1->gencode(method)
        << expr2->gencode(method)
        << "xor edx, edx\n"
        << "mov eax, " + getPlace(expr1) + "\n"
        << "mov ecx, " + getPlace(expr2) + "\n"
        << "cdq\n"
        << "idiv ecx " << "    ;"<< toString()<<"\n";
    place = "ebp - " + std::to_string(method->getOffset());
    sscode   << "mov dword[" + place + "], edx\n";
    code = sscode.str();
    return code;
}

gencode(And_Expr){
    std::ostringstream sscode;
    sscode << expr1->gencode(method)
        << expr2->gencode(method)
        << "mov eax, " + getPlace(expr1) + "\n"
        << "and eax, " + getPlace(expr2) + "\n";
    place = "ebp - " + std::to_string(method->getOffset());
    sscode   << "mov dword[" + place + "], eax\n";
    code = sscode.str();
    return code;
}

gencode(Or_Expr){
    std::ostringstream sscode;
    sscode << expr1->gencode(method)
        << expr2->gencode(method)
        << "mov eax, " + getPlace(expr1) + "\n"
        << "or eax, " + getPlace(expr2) + "\n";
    place = "ebp - " + std::to_string(method->getOffset());
    sscode   << "mov dword[" + place + "], eax\n";
    code = sscode.str();
    return code;
}

gencode(EQ_Expr){
    string_t lbl = newlbl();
    code = expr1->gencode(method);
    code += expr2->gencode(method);
    code += "mov eax, " + getPlace(expr1) + "\n";
    code += "cmp eax, " + getPlace(expr2) + "\n";
    code += "je " + lbl +"\n";
    code += "mov eax, 0\njmp end_" + lbl + "\n";
    code += lbl + ":\nmov eax, 1\n";
    code += "end_" +  lbl+ ":\n";
    place = "ebp - " + std::to_string(method->getOffset());
    code += "mov dword[" + place + "], eax\n";
    return code;
}

gencode(NE_Expr){
    string_t lbl = newlbl();
    code = expr1->gencode(method);
    code += expr2->gencode(method);
    code += "mov eax, " + getPlace(expr1) + "\n";
    code += "cmp eax, " + getPlace(expr2) + "\n";
    code += "jne " + lbl +"\n";
    code += "mov eax, 0\njmp end_" + lbl + "\n";
    code += lbl + ":\nmov eax, 1\n";
    code += "end_" +  lbl+ ":\n";
    place = "ebp - " + std::to_string(method->getOffset());
    code += "mov dword[" + place + "], eax\n";
    return code;
}

gencode(GT_Expr){
    string_t lbl = newlbl();
    code = expr1->gencode(method);
    code += expr2->gencode(method);
    code += "mov eax, " + getPlace(expr1) + "\n";
    code += "cmp eax, " + getPlace(expr2) + "\n";
    code += "jg " + lbl +"\n";
    code += "mov eax, 0\njmp end_" + lbl + "\n";
    code += lbl + ":\nmov eax, 1\n";
    code += "end_" +  lbl+ ":\n";
    place = "ebp - " + std::to_string(method->getOffset());
    code += "mov dword[" + place + "], eax\n";
    return code;
}

gencode(GE_Expr){
    string_t lbl = newlbl();
    code = expr1->gencode(method);
    code += expr2->gencode(method);
    code += "mov eax, " + getPlace(expr1) + "\n";
    code += "cmp eax, " + getPlace(expr2) + "\n";
    code += "jge " + lbl +"\n";
    code += "mov eax, 0\njmp end_" + lbl + "\n";
    code += lbl + ":\nmov eax, 1\n";
    code += "end_" +  lbl+ ":\n";
    place = "ebp - " + std::to_string(method->getOffset());
    code += "mov dword[" + place + "], eax\n";
    return code;
}

gencode(LT_Expr){
    string_t lbl = newlbl();
    code = expr1->gencode(method);
    code += expr2->gencode(method);
    code += "mov eax, " + getPlace(expr1) + "\n";
    code += "cmp eax, " + getPlace(expr2) + "\n";
    code += "jl " + lbl +"\n";
    code += "mov eax, 0\njmp end_" + lbl + "\n";
    code += lbl + ":\nmov eax, 1\n";
    code += "end_" +  lbl+ ":\n";
    place = "ebp - " + std::to_string(method->getOffset());
    code += "mov dword[" + place + "], eax\n";
    return code;
}

gencode(LE_Expr){
    string_t lbl = newlbl();
    code = expr1->gencode(method);
    code += expr2->gencode(method);
    code += "mov eax, " + getPlace(expr1) + "\n";
    code += "cmp eax, " + getPlace(expr2) + "\n";
    code += "jle " + lbl +"\n";
    code += "mov eax, 0\njmp end_" + lbl + "\n";
    code += lbl + ":\nmov eax, 1\n";
    code += "end_" +  lbl+ ":\n";
    place = "ebp - " + std::to_string(method->getOffset());
    code += "mov dword[" + place + "], eax\n";
    return code;
}

gencode(SHR_Expr){
    std::ostringstream sscode;
    sscode << expr1->gencode(method)
        << expr2->gencode(method)
        << "mov eax, " + getPlace(expr1) + "\n"
        << "sar eax, " + getPlace(expr2) + "    ;"<< toString()<<"\n";
    place = "ebp - " + std::to_string(method->getOffset());
    sscode   << "mov dword[" + place + "], eax\n";
    code = sscode.str();
    return code;
}

gencode(SHL_Expr){
    std::ostringstream sscode;
    sscode << expr1->gencode(method)
        << expr2->gencode(method)
        << "mov eax, " + getPlace(expr1) + "\n"
        << "sal eax, " + getPlace(expr2) + "    ;"<< toString()<<"\n";
    place = "ebp - " + std::to_string(method->getOffset());
    sscode   << "mov dword[" + place + "], eax\n";
    code = sscode.str();
    return code;
}

gencode(Neg_Expr){
    std::ostringstream sscode;
    sscode << expr->gencode(method)
        << "mov eax, " << getPlace(expr) << "\n"
        << "neg eax\n";
    place = "ebp - " + std::to_string(method->getOffset());
    sscode   << "mov dword[" + place + "], eax\n";
    code = sscode.str();
    return code;
}

gencode(Not_Expr){
    string_t lbl = newlbl();
    std::ostringstream sscode;
    sscode << expr->gencode(method)
        << "mov eax, " << getPlace(expr) << "\n"
        << "cmp eax, 0\n"
        << "je " << lbl << "\n"
        << "mov eax, 1\n"
        << "jmp end_" << lbl <<"\n"
        << lbl << ":\n"
        << "mov eax, 0\n"
        << "end_" << lbl << ":\n"; 
    place = "ebp - " + std::to_string(method->getOffset());
    sscode   << "mov dword[" + place + "], eax\n";
    code = sscode.str();
    return code;
}