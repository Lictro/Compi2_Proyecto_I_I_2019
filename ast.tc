%option lang = "C++"

%decls %{
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <vector>
#include <unordered_map>
#include "symbols_handler.h"

class ASTNode;

typedef std::vector<ASTNode*> astn_list;
typedef std::string string_t; 

bool getCountErr();
%}

%{
#include "decaf_ast.h"

int ERRORS;

bool getCountErr(){
    if(ERRORS > 0){
        std::cout<<"\nErrores "<<ERRORS<<std::endl;
        return false;
    }
    return true;
}

string_t METHOD_NAME;

std::vector<std::string> strconst;
int CURRENT_TYPE;
int GOTOLOCAL = 0;

std::vector<MethodDef*> functions;

void addFn(MethodDef* df){
    functions.push_back(df);
}

int getParamsCount(string_t name){
    for(int i = 0; i < functions.size(); i++){
        if(functions[i]->name == name){
            return functions[i]->params.size();
        }
    }
    return 0;
}

int getTypeParam(string_t name, string_t symbol){
    //std::cout << name << " ->>>>" << std::endl;
    for(int i = 0; i < functions.size(); i++){
        if(functions[i]->name == name){
            return functions[i]->getType(symbol);
        }
    }
    return 0;
}

string_t getNameParam(string_t name, int id){
    for(int i = 0; i < functions.size(); i++){
        if(functions[i]->name == name){
            return functions[i]->params[id];
        }
    }
    return "";
}
//Generacion de Codigo x86
int count_str;
std::unordered_map<std::string, std::string>strcst;
int labels;
std::stack<string_t> exit_point;
std::stack<string_t> goback_point;
std::stack<string_t> exit_methods;

std::unordered_map<std::string, bool> temp = {
        {"eax", false},
        {"ecx", false},
        {"edx", false}
    };

std::vector<string_t> explode(string_t& s, const char& c)
{
	string_t buff{""};
	std::vector<string_t> v;
	
	for(auto n:s)
	{
		if(n != c) buff+=n; else
		if(n == c && buff != "") { v.push_back(buff); buff = ""; }
	}
	if(buff != "") v.push_back(buff);
	
	return v;
}

string_t save_str(std::string str){
    auto found = strcst.find(str);
    if(found == strcst.end()){
        count_str++;
        auto val = "str"+std::to_string(count_str);
        strcst.insert(std::make_pair(str, val));
        return val;
    }
    return found->second;
}

string_t newlbl(){
    labels++;
    return "label"+std::to_string(labels);
}

string_t getTextSection(){
    std::ostringstream code;
    for( const auto& sm_pair : strcst ){
        code << sm_pair.second << " db "<<sm_pair.first << ", 0\n";
    }
    return code.str();
}

string_t getFreeTemp(){
    if(!temp["eax"]){
        temp["eax"] = true;
        return "eax";
    }else if(!temp["ecx"]){
        temp["ecx"] = true;
        return "ecx";
    }else if(!temp["edx"]){
        temp["edx"] = true;
        return "edx";
    }
    return "none";
}

string_t getPlace(ASTNode* e){
    if(e->isA(Number_kind) || e->isA(BoolConst_kind)){
      return e->place;
    }
    return "dword[" +e->place+"]";
  }
%}

%node ASTNode %abstract %typedef = {
    %nocreate string_t code;
    %nocreate string_t place;
}
%node Statement ASTNode %abstract %typedef
%node Expr ASTNode %abstract %typedef

%node Program Statement = {
    string_t id_prog;
    ASTNode* decl_field;
    ASTNode* method_field;
}

%node Type ASTNode %abstract %typedef

%node IntegerType Type = {}

%node BoolType Type = {}

%node VoidType Type = {}

/*
%node ArrayType Type = {
    ASTNode* type;
    Expr* number;
}*/

%node DeclareField ASTNode = {
    %nocreate astn_list decla_list;
}

%node Declaration ASTNode = {
    ASTNode* type;
    ASTNode* declares;
}

%node DeclareList ASTNode = {
    %nocreate astn_list symbols;
}

%node DeclareSimple ASTNode = {
    string_t id;
    ASTNode* init;
}

%node DeclareIdx ASTNode = {
    string_t id;
    int size;
}

%node MethodsField ASTNode = {
    %nocreate astn_list methods;
}

%node Method ASTNode = {
    %nocreate MethodDef* def;
    ASTNode* type;
    string_t id;
    ASTNode* params;
    ASTNode* block;
}

%node Parameters ASTNode = {
    %nocreate astn_list params;
}

%node Param ASTNode = {
    ASTNode* type;
    string_t id;
}

%node AssignStatement Statement = {
    Expr* lhs;
    Expr* rhs;
}

%node MethodCallStatement Statement = {
    string_t identifier;
    ASTNode* args; 
}

%node ArgumentsList Statement = {
    %nocreate astn_list args;
}

%node ExprList Statement = {
    %nocreate astn_list exprs;
}

%node IfStatement Statement = {
    Expr* cond;
    ASTNode * true_blk;
    ASTNode * close_blk;
}

%node WhileStatement Statement = {
    Expr* cond;
    ASTNode * block;
}

%node ReturnStatement Statement = {
    Expr* expr;
}

%node BreakStatement Statement = {}
%node ContinueStatement Statement = {}

%node ForStatement Statement = {
    ASTNode* assignings;
    Expr* cond;
    ASTNode* increments;
    ASTNode* block;
}

%node AssigningsStatement Statement = {
    %nocreate astn_list assigns;
}

%node BlockStatement Statement = {
    %nocreate ASTNode* decl_field;
    %nocreate astn_list stmts;
}


//Expressiones
%node Binary Expr %abstract =
{
    Expr *expr1;
    Expr *expr2;
    string_t oper;
}

%node Unary Expr %abstract =
{
    Expr *expr;
}

%node Number Expr = {
    int number;
}

%node BoolConst Expr = {
    int tOf;
}

%node CharConst Expr = {
    int ch;
}

%node MethodCallExpr Expr =  {
    string_t id;
    ASTNode * exprs; 
}

%node LValueSim Expr = {
    string_t id;
}

%node LValueIdx Expr = {
    string_t id;
    Expr* idx;
}

%node And_Expr Binary //bool
%node Or_Expr Binary //bool
%node EQ_Expr Binary
%node NE_Expr Binary
%node GT_Expr Binary
%node GE_Expr Binary
%node LT_Expr Binary
%node LE_Expr Binary
%node SHR_Expr Binary
%node SHL_Expr Binary
%node Mod_Expr Binary
%node Add_Expr Binary
%node Sub_Expr Binary
%node Mul_Expr Binary
%node Div_Expr Binary

%node Not_Expr Unary //bool
%node Neg_Expr Unary //arith

%node StrLiteral ASTNode = {
    string_t text;
}

%operation %virtual string_t toString(ASTNode *this)

toString(StrLiteral){
    return text;
}

toString(Program){
    string_t prog;
    if(decl_field != nullptr){
        prog = decl_field->toString();
    }
    return  "class " + id_prog + "{\n" + prog + "\n" + method_field->toString() + "}";
}

toString(IntegerType){
    return "int";
}

toString(BoolType){
    return "bool";
}

toString(VoidType){
    return "void";
}

toString(DeclareField){
    string_t field;
    for(int i = 0; i < decla_list.size(); i++){
        field += decla_list[i]->toString() + ";\n" ;
    }
    return field;
}

toString(Declaration){
    return type->toString() + " " + declares->toString();
}

toString(DeclareList){
    string_t ids;
    for(int i = 0; i < symbols.size(); i++){
        ids += symbols[i]->toString() + ", ";
    }
    ids.erase(ids.length()-2);
    return ids;
}

toString(DeclareSimple){
    string_t initial;
    if(init != nullptr){
        initial = " = " + init->toString();
    }
    return id + initial;
}

toString(DeclareIdx){
    return id + "[" + std::to_string(size) + "]";
}

toString(MethodsField){
    string_t methods_str;
    for(int i = 0; i < methods.size(); i++){
        methods_str += methods[i]->toString() + "\n";
    }
    return methods_str;
}

toString(Method){
    string_t methods_str = type->toString();
    methods_str += " " + id + "(";
    if(params != nullptr){
        methods_str += params->toString();
    }
    methods_str += ")";
    if(block != nullptr){
        methods_str += block->toString();
    }else{
        methods_str += "{}";
    }   
    return methods_str;
}

toString(Parameters){
    string_t params_str = params[0]->toString();
    for(int i = 1; i < params.size(); i++){
        params_str += ", " + params[i]->toString();
    }
    return params_str;
}

toString(Param){
    return type->toString() + " " + id;
}

toString(AssignStatement){
    return lhs->toString() + " = " + rhs->toString() + ";";
}

toString(MethodCallStatement){
    string_t args_str;
    if(args != nullptr)
        args_str = args->toString();
    return identifier + "(" + args_str + ");";
}

toString(ArgumentsList){
    string_t args_str = args[0]->toString();
    for(int i = 1; i < args.size(); i++){
        args_str += ", "+ args[i]->toString();
    }
    return args_str;
}

toString(ExprList){
    string_t exprs_str = exprs[0]->toString();
    for(int i = 1; i < exprs.size(); i++){
        exprs_str += ", "+  exprs[i]->toString();
    }
    return exprs_str;
}

toString(IfStatement){
    string_t str = "if("+cond->toString()+")";
    str += true_blk->toString();
    if(close_blk != nullptr){
        str += "else"+close_blk->toString();
    }
    return str;
}

toString(WhileStatement){
    string_t str = "while("+cond->toString()+")";
    str += block->toString();
    return str;
}

toString(ReturnStatement){
    if(expr == nullptr){
        return "return;";
    }
    return "return " + expr->toString()+ ";";
}

toString(BreakStatement){
    return "break;";
}

toString(ContinueStatement){
    return "continue;";
}

toString(ForStatement){
    string_t str = "for("+assignings->toString()+" ; "+cond->toString()+" ; ";
    str += increments->toString()+")";
    str += block->toString();
    return str;
}

toString(AssigningsStatement){
    string_t str = assigns[0]->toString();
    str.erase(str.length()-1);
    for(int i = 1; i < assigns.size(); i++){
        string_t t = assigns[i]->toString();
        t.erase(t.length()-1);
        str += ", " + t;
    }
    //ids.erase(ids.length()-2);
    return str;
}

toString(BlockStatement){
    string_t str = "{\n";;
    if(decl_field !=  nullptr)
        str += decl_field->toString()+"\n";
    
    for(int i = 0; i < stmts.size(); i++){
        str += stmts[i]->toString() + "\n";
    }
    str += "}";
    return str;
}

//Expressiones

toString(Binary){
    return expr1->toString() + oper + expr2->toString();
}

toString(Not_Expr){
    return "!" + expr->toString();
}

toString(Neg_Expr){
    return "-" + expr->toString();
}

toString(Number){
    return std::to_string(number);
}

toString(CharConst){
    return std::to_string(ch);
}

toString(BoolConst){
    if(tOf){
        return "true";
    }
    return "false";
}

toString(MethodCallExpr){
    string_t args_str;
    args_str = exprs->toString();
    return id + "(" + args_str + ")";
}

toString(LValueSim){
    return id;
}

toString(LValueIdx){
    return id + "(" + idx->toString() + ")";
}

%include "load_symbols.tc"
%include "semantic_ast.tc"
%include "gencode.tc"